%% title = "tairu - an interactive exploration of 2D autotiling techniques"
scripts = [
    "tairu/cardinal-directions.js",
    "tairu/framework.js",
    "tairu/tairu.js",
    "tairu/tilemap-registry.js",
]
styles = ["tairu.css"]

% id = "01HPD4XQPWM8ECT2QM6AT9YRWB"
- I remember since my early days doing programming, I've been interested in how games like Terraria handle automatically tiling their terrain.

    % id = "01HPD4XQPWPDBH6QQAZER7A05G"
    - in Terraria, you can fully modify the terrain however you want, and the tiles will connect to each other seamlessly.

        % id = "01HPD4XQPW8HE7681P7H686X4N"
        - TODO: short videos demoing this here

% id = "01HPD4XQPWJBTJ4DWAQE3J87C9"
- once upon a time I heard of a technique called...\
**bitwise autotiling**

    % id = "01HPD4XQPW6VK3FDW5QRCE6HSS"
    + I learned about it back when I was building 2D Minecraft clones using [Construct 2](https://www.construct.net/en/construct-2/manuals/construct-2), and I wanted my terrain to look nice as it does in Terraria

        % id = "01HPD4XQPWJ1CE9ZVRW98X7HE6"
        - Construct 2 was one of my first programming experiences and the first game engine I truly actually liked :smile:

    % id = "01HPJ8GHDET8ZGNN0AH3FWA8HX"
    - let's begin with a tilemap. say we have the following grid of tiles: (the examples are interactive, try editing it!)

    <canvas
        is="tairu-editor"
        data-tilemap-id="bitwiseAutotiling"
        data-tile-size="40">
        Your browser does not support &lt;canvas&gt;.
    </canvas>

    % id = "01HPJ8GHDEC0Z334M04MTNADV9"
    - for each tile, we can assign a bitset of cardinal directions like so:

    <canvas
        is="tairu-editor-cardinal-directions"
        data-tilemap-id="bitwiseAutotiling"
        data-tile-size="40">
        Your browser does not support &lt;canvas&gt;.
    </canvas>

    % template = true
      id = "01HPJ8GHDE9QKQ4QFZK1Z1KQD4"
      classes.branch = "tileset-cardinal-directions-demo"
    + now given a tileset, such as the one below that I drew a while ago, we can assign each tile to a set of cardinal directions.
    I'll indicate where there's a connection between individual tiles with the letters **N**, **E**, **S**, **W**, standing for the cardinal directions **N**orth, **E**ast, **S**outh, and **W**est.

    <ul class="tileset-demo">
    <li class="full-image">
    <img alt="a 16-tile tileset of 8x8 pixel metal" src="{% pic 01HPHVDRV0F0251MD0A2EG66C4 %}">
    </li>
    <li class="tileset-pieces">
    <span class="metal x-0 y-0"><span class="east">E</span><span class="south">S</span></span>
    <span class="metal x-1 y-0"><span class="east">E</span><span class="south">S</span><span class="west">W</span></span>
    <span class="metal x-2 y-0"><span class="south">S</span><span class="west">W</span></span>
    <span class="metal x-3 y-0"><span class="south">S</span></span>
    <span class="metal x-0 y-1"><span class="east">E</span><span class="south">S</span><span class="north">N</span></span>
    <span class="metal x-1 y-1"><span class="east">E</span><span class="south">S</span><span class="west">W</span><span class="north">N</span></span>
    <span class="metal x-2 y-1"><span class="south">S</span><span class="west">W</span><span class="north">N</span></span>
    <span class="metal x-3 y-1"><span class="south">S</span><span class="north">N</span></span>
    <span class="metal x-0 y-2"><span class="east">E</span><span class="north">N</span></span>
    <span class="metal x-1 y-2"><span class="east">E</span><span class="west">W</span><span class="north">N</span></span>
    <span class="metal x-2 y-2"><span class="west">W</span><span class="north">N</span></span>
    <span class="metal x-3 y-2"><span class="north">N</span></span>
    <span class="metal x-0 y-3"><span class="east">E</span></span>
    <span class="metal x-1 y-3"><span class="east">E</span><span class="west">W</span></span>
    <span class="metal x-2 y-3"><span class="west">W</span></span>
    <span class="metal x-3 y-3"></span>
    </li>
    </ul>

        % id = "01HPMVT9BM65YD5AXWPT4Z67H5"
        - (it's frustratingly hard to center individual letters like this in CSS. please forgive me for how crooked these are!)

    % id = "01HPMVT9BM5V4BP8K80X0C1HJZ"
    - note that the state of connection for a given cardinal direction can be represented using two values: **connected**, and **not connected**.
    two values make one bit, so we can pack these four connection states into four bits, and use that as an array index!

        % classes.branch = "tileset-cardinal-directions-demo"
          id = "01HPMVT9BM4AXG2Z1D2QBH828G"
        + for that to work though, we need to rearrange our tilemap somewhat such that we can index into it easily using our integer.
        assuming we pack our bits as `NWSE` (bit 0 is east, each next bit we go clockwise),
        therefore the final arrangement is this:

        <div class="horizontal-tile-strip">
        <span class="metal x-3 y-3"></span>
        <span class="metal x-0 y-3"><span class="east">E</span></span>
        <span class="metal x-3 y-0"><span class="south">S</span></span>
        <span class="metal x-0 y-0"><span class="east">E</span><span class="south">S</span></span>
        <span class="metal x-2 y-3"><span class="west">W</span></span>
        <span class="metal x-1 y-3"><span class="east">E</span><span class="west">W</span></span>
        <span class="metal x-2 y-0"><span class="south">S</span><span class="west">W</span></span>
        <span class="metal x-1 y-0"><span class="east">E</span><span class="south">S</span><span class="west">W</span></span>
        <span class="metal x-3 y-2"><span class="north">N</span></span>
        <span class="metal x-0 y-2"><span class="east">E</span><span class="north">N</span></span>
        <span class="metal x-3 y-1"><span class="south">S</span><span class="north">N</span></span>
        <span class="metal x-0 y-1"><span class="east">E</span><span class="south">S</span><span class="north">N</span></span>
        <span class="metal x-2 y-2"><span class="west">W</span><span class="north">N</span></span>
        <span class="metal x-1 y-2"><span class="east">E</span><span class="west">W</span><span class="north">N</span></span>
        <span class="metal x-2 y-1"><span class="south">S</span><span class="west">W</span><span class="north">N</span></span>
        <span class="metal x-1 y-1"><span class="east">E</span><span class="south">S</span><span class="west">W</span><span class="north">N</span></span>
        </div>

        packing that into a single tilesheet, or rather tile *strip*, we get this image:

        ![horizontal tile strip of 16 8x8 pixel metal tiles][pic:01HPMMR6DGKYTPZ9CK0WQWKNX5]

    % id = "01HPMVT9BMMEM4HT4ANZ40992P"
    - in JavaScript, drawing on a `<canvas>` using bitwise autotiling would look like this:
    ```javascript
    for (let y = 0; y < tilemap.height; ++y) {
        for (let x = 0; x < tilemap.width; ++x) {
            // Assume `tilemap.at` is a function which returns the type of tile
            // stored at coordinates (x, y).
            let tile = tilemap.at(x, y);

            // We need to treat *some* tile as an empty (fully transparent) tile.
            // In our case that'll be 0.
            if (tile != 0) {
                let tileset = tilesets[tile];

                // Now it's time to represent the tile connections as bits.
                // For each cardinal direction we produce a different bit value, or 0 if there is
                // no connection:
                let connectedWithEast = shouldConnect(tile, tilemap.at(x + 1, y)) ? 0b0001 : 0;
                let connectedWithSouth = shouldConnect(tile, tilemap.at(x, y + 1)) ? 0b0010 : 0;
                let connectedWithWest = shouldConnect(tile, tilemap.at(x - 1, y)) ? 0b0100 : 0;
                let connectedWithNorth = shouldConnect(tile, tilemap.at(x, y - 1)) ? 0b1000 : 0;
                // Then we OR them together into one integer.
                let tileIndex = connectedWithNorth
                    | connectedWithWest
                    | connectedWithSouth
                    | connectedWithEast;

                // With that, we can draw the correct tile.
                // Our strip is a single horizontal line, so we can assume
                let tilesetTileSize = tileset.height;
                let tilesetX = tileIndex * tilesetTileSize;
                let tilesetY = 0;
                ctx.drawImage(
                    tilesets[tile],
                    tilesetX, tilesetY, tilesetTileSize, tilesetTileSize,
                    x * tileSize, y * tileSize, tileSize, tileSize,
                );
            }
        }
    }
    ```

    % template = true
      id = "01HPMVT9BM9CS9375MX4H9WKW8"
    - and that gives us this result:

    <canvas
        is="tairu-editor"
        data-tilemap-id="bitwiseAutotiling"
        data-tile-size="40"
    >
        Your browser does not support &lt;canvas&gt;.
        <img class="resource" src="{% pic 01HPMMR6DGKYTPZ9CK0WQWKNX5 %}" data-tairu-tileset="1">
    </canvas>

    % id = "01HPMVT9BM3WR0BNZFHP2BPZ8A"
    - but if you play around with it (or have *already* played around with it, and are therefore left with a non-default tilemap)

    ...something seems awful about it doesn't it?

        % template = true
          id = "01HPMVT9BMPA89037VPWPPWX8V"
        - something's off about the corners. let me give you a fresh example to illustrate what I mean:

        <canvas
            is="tairu-editor"
            data-tilemap-id="bitwiseAutotilingChapter2"
            data-tile-size="40"
        >
            Your browser does not support &lt;canvas&gt;.
            <img class="resource" src="{% pic 01HPMMR6DGKYTPZ9CK0WQWKNX5 %}" data-tairu-tileset="1">
        </canvas>

        % id = "01HPMVT9BM16EF3TV5J1K19JAM"
        + see that tile in the bottom left corner of the `L` shape? it's missing a corner.
        the top-right corner, to be exact, which makes it visually disjoint from the tiles to the north and the east.

            % id = "01HPMVT9BM5VWJSMDNPK2SRNZV"
            - (I'm totally not trying to say this implementation is an L so far)

        % id = "01HPMVT9BMWG6QHQ125Z884W8Z"
        + i'll cut right to the chase here and say it outright - the issue is that we simply don't have enough tiles to represent corner cases like this!

            % id = "01HPMVT9BMQK8N1H68YV3J4CFQ"
            - see what I did there?

        % id = "01HPMVT9BMJTG3KD3K5EJ3BC93"
        - the solution here is to introduce more tiles to handle these edge cases.

        TODO Explain

% id = "01HPD4XQPWT9N8X9BD9GKWD78F"
- bitwise autotiling is a really cool technique that I've used in plenty of games in the past

    % id = "01HPD4XQPW5FQY8M04S6JEBDHQ"
    - as I mentioned before, [I've known it since my Construct 2 days][branch:01HPD4XQPW6VK3FDW5QRCE6HSS], but when it comes to my released games [Planet Overgamma] would probably be the first to utilize it properly

    TODO video of some Planet Overgamma gameplay showing the autotiling in action

    [Planet Overgamma]: https://liquidev.itch.io/planet-overgamma-classic

        % id = "01HPJ8GHDEN4XRPT1AJ1BTNTFJ"
        - this accursed game has been haunting me for years since; there have been many iterations.
        he autotiling source code of the one in the video can be found [here][autotiling source code].

        [autotiling source code]: https://github.com/liquidev/planet-overgamma/blob/classic/jam/map.lua#L209

% id = "01HPD4XQPWPN6HNA6M6EH507C6"
+ but one day I found a really cool project called [Tilekit](https://rxi.itch.io/tilekit)

    % id = "01HPD4XQPW11EQTBDQSGXW3S52"
    + (of course it's really cool, after all rxi made it)

        % id = "01HPD4XQPWYHS327BV586SB085"
        - for context rxi is the genius behind the Lua-powered, simple, and modular text editor `lite` that I was using for quite a while

            % id = "01HPD4XQPWJ9QAQ5MF2J5JBB8M"
            - after a while I switched to a fork - Lite XL, which had better font rendering and more features

            % id = "01HPD4XQPWB11TZSX5VAAJ6TCD"
            - I stopped using it because VS Code was just more feature packed and usable; no need to reinvent the wheel, rust-analyzer *just works.*

                % id = "01HPD4XQPW3G7BXTBBTD05MB8V"
                - the LSP plugin for Lite XL had some issues around autocompletions not filling in properly :pensive:\
                it's likely a lot better now, but back then I decided this is too much for my nerves.
                while tinkering with your editor is something really cool, in my experience it's only cool up to a point.

% id = "01HPD4XQPWV1BAPA27SNDFR93B"
- the cool thing with Tilekit is that it's *more* than just your average bitwise autotiling - of course it *can* do basic autotiling, but it can also do so much more

    % id = "01HPD4XQPWM1JSAPXVT6NBHKYY"
      classes.branch_children = "branch-quote"
    - if I had to describe it, it's basically something of a *shader langauge for tilesets.* this makes it really powerful, as you can do little programs like

        % id = "01HPD4XQPWE7ZVR0SS67DHTGHQ"
        - autotile using this base tileset

        % id = "01HPD4XQPW2BFZYQQ920SYHM9M"
        - if the tile above is empty AND with a 50% chance

            % id = "01HPD4XQPWJB7V67TS1M3HFCYE"
            - then grass

        % id = "01HPD4XQPWF7K85Z0CEK4WDDBZ"
        - if the tile above is solid AND with a 10% chance

            % id = "01HPD4XQPW5J3N6MVT9Z2W00S9"
            - then vines

        % id = "01HPD4XQPWGCMCEAR5Z9EETSGP"
        - if the tile above is vines AND with a 50% chance

            % id = "01HPD4XQPWP847T0EAM0FJ88T4"
            - then vines

    % id = "01HPD4XQPWK58Z63X6962STADR"
    - I mean, after all - bitwise autotiling is basically a clever solution to an `if` complexity problem, so why not extend that with more logic and rules and stuff to let you build more complex maps?

        % id = "01HPJ8GHDFRA2SPNHKJYD0SYPP"
        - of course Tilekit's solution is a lot more simple, streamlined, and user-friendly, but you get the gist.

% id = "01HPD4XQPW4Y075XWJCT6AATB2"
- ever since then I've been wanting to build something just like Tilekit, but in the form of an educational, interactive blog post to demonstrate the ideas in a fun way

    % id = "01HPD4XQPWR8J9WCNBNCTJERZS"
    - and what you're reading is the result of that.

% id = "01HPD4XQPW1EP8YHACRJVMA0GM"
- so let's get going! first, we'll build a basic tile editor using JavaScript.

    % id = "01HPD4XQPWPNRTVJFNFGNHJMG1"
    + not my favorite language, but we're on the Web so it's not like we have much more of a choice.

        % id = "01HPD4XQPWGK7M4XJYC99XE4T6"
        - I could use TypeScript, but this page follows a philosophy of not introducing complexity where I can deal without it.
        TypeScript is totally cool, but not necessary.

    % id = "01HPD4XQPWAE0ZH46WME6WJSVP"
    - I'll be using Web Components (in particular, custom elements) combined with canvas to add stuff onto the page.
