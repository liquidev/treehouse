%% title = "syntax highlighting gallery"

% id = "01HRT0DG7VSMZCX4PPCKE3ZCKN"
- this is a page demonstrating syntaxes supported by the treehouse

    % id = "01HRT0DG7VF31P185J898QQH85"
    - really there's not much more to it, but I use it for debugging + with it you can get a general feel for how I highlight things in the treehouse

% id = "01HRT0DG7VN5TH971H7W8AT8YY"
- `javascript`

    % id = "01HRT0DG7V9PAY44NMYVMF7B63"
    - patterns
    ```javascript
    // This is a single-line comment.
    /* This is
    a multiline comment. */

    ident Class CONSTANT funciton()
    0b1010 0o01234567 0x0123456789ABCDEF
    01234567
    1.0 1.41e-3 1.42E+4 1.43e1
    'string' "string" `string`
    + - * / == != <= >= ! ~ || && . ? :
    , ;
    ```

    % id = "01HRT0DG7VM2MV9YA5D694WA8Y"
    - keywords
    ```javascript
    as async await break case catch class const continue debugger default delete do else export
    extends finally for from function get if import in instanceof let new of return set static
    switch throw try typeof var void while with yield

    super this

    false true undefined null
    ```

    % id = "01HRT0DG7VA7MA87JR7MGQW294"
    - sample code
    ```javascript
    // t is an existing tile index; variable name is short for brevity
    export function removeRedundancies(t) {
        if (isSet(t, SE) && (!isSet(t, S) || !isSet(t, E))) {
            t &= ~SE;
        }
        if (isSet(t, SW) && (!isSet(t, S) || !isSet(t, W))) {
            t &= ~SW;
        }
        if (isSet(t, NW) && (!isSet(t, N) || !isSet(t, W))) {
            t &= ~NW;
        }
        if (isSet(t, NE) && (!isSet(t, N) || !isSet(t, E))) {
            t &= ~NE;
        }
        return t;
    }
    ```

    % id = "01HRT0DG7V51ENS54V2QFEAAF0"
    + edge cases

        % id = "01HRT0DG7VHX3VJ861W5VF0FNP"
        - ```javascript
        "cause i don't need"
        many_words "many words"

        'how can we connect this way'
        when_i_dont_understand 'the words you say'
        ```
        ```javascript
        hello "string\"escape" world
        ```

        this one is tricky because it requires a whopping five backslashes in the JSON syntax definition, and I initially had the pattern defined as:
        ```json
        { "regex": "\"(\\\"|[^\"])*\"", "is": "string" }
        ```
        which produced the following regex:
        ```regex
        "(\"|[^"])*"
        ```
        escaping the `"` in the process, therefore producing the following regex:
        ```regex
        "("|[^"])*"
        ```
        which can be reduced to:
        ```regex
        "([^])*"
        ```

        note that `[^]` is not the same as `.`, because the latter omits newlines.

% id = "01HRT0W4AKQJEAMJ8XHJVMY4ZV"
- `json`

    % id = "01HRT0W4AKPFENNFWMA7AAGN5Z"
    - patterns
    ```json
    abcd
    0.912392198e+2113
    "abcd":
    "abcd"
    ,
    ```

    % id = "01HRT0W4AK8D1W9ZN9HJTHC85Q"
    - keywords
    ```json
    null true false
    ```

    % id = "01HRT0W4AK4F2S65M1NT75PCGQ"
    - sample
    ```json
    {
        "patterns": [
            { "regex": "[a-zA-Z_][a-zA-Z0-9_]*", "is": "error" },
            { "regex": "[0-9]+(\\.[0-9]*([eE][-+]?[0-9]+)?)?", "is": "literal" },
            {
                "regex": "\"(\\\\\"|[^\"])*\"(:)",
                "is": { "default": "keyword2", "captures": ["keyword2", "punct"] }
            },
            { "regex": "\"(\\\\\"|[^\"])*\"", "is": "string" },
            { "regex": "[,]", "is": "punct" }
        ],
        "keywords": {
            "null": { "into": "literal" },
            "true": { "into": "literal" },
            "false": { "into": "literal" }
        }
    }
    ```

% id = "01HTAQ23YHXTEZ7WNVZREZ8WSZ"
- `lua`

    % id = "01HTAQ23YHP2MN7VANBA573WWB"
    - patterns
    ```lua
    -- single-line comment
    --[[
        multi-line comment
        NOTE: comments with [==[ ]==] are not supported due to a lack of backreference support
              in Rust regex
    ]]

    'string' "string" [[multiline
    string]]
    0xABCD 0xA.B 0xAp+3 0xCE.DE5p-2
    123 1.0 1.41e-3 1.42E+4 1.43e1
    <bye_egg>
    ...
    + - * / % ^ == ~= <= >= #
    funciton() ident
    ```

    % id = "01HTAQ23YHY8EH8Z8AQEQ8G6SA"
    - keywords
    ```lua
    if then else elseif end do function repeat until while for break return local in not and or goto
    self
    true false nil
    <close> <const>
    ```

    % id = "01HTAQ23YHCRZFXM02VYRVS4JS"
    - sample
    ```lua
    -- Ticks the scheduler: executes every active fiber, removes inactive fibers,
    -- and ignores sleeping fibers.
    --
    -- Extra arguments passed to this function are passed to all running fibers.
    function Scheduler:tick(...)
        local time = timer.getTime()
        local i = 1
        while i <= #self.fibers do
            local fiber = self.fibers[i]
            local coro = fiber.coro
            if time >= fiber.wakeAt then
                local ok, result = coroutine.resume(coro, ...)
                if not ok then
                    error("scheduler for '"..self.name.."': "..
                        "ticking '"..fiber.name.."' failed with an error\n"..result)
                else
                    if coroutine.status(coro) == "dead" then
                        self.fibers[i] = self.fibers[#self.fibers]
                        self.fibers[#self.fibers] = nil
                        i = i - 1
                    elseif result ~= nil and result > 0 then
                        fiber.wakeAt = time + result
                    end
                end
            end
            i = i + 1
        end
    end
    ```

% id = "01HTWRAS0EHFG2V4N6NCR403C5"
- `rust`

    % id = "01HTWRAS0E9FRH08MZZKMKXX2M"
    - patterns
    ```rust
    // this is a comment
    /* this is a multiline comment */

    "string" 'c' 'ł'
    b"string" b'ł'
    r"string" r#"string"# r##"string"## r###"string"###
    0b11001100 0b11001100_u8
    0o1234567_f32
    0xDEADBEEF 0xDEADBEEF_i16
    2137
    3.14159265 2.3e-32
    + - * / % == ~= <= >= & .
    #![doc = ""]
    identifier macro! function() 'static
    T Vec<i32>
    union Example
    europeanunion A
    ```

    % id = "01HTWRAS0EQ3E9BV7TWEGQ01YF"
    - keywords
    ```rust
    _ as async await break const continue dyn else enum extern fn for if impl in let loop
    macro_rules! match mod move mut pub ref return static struct trait type unsafe use where while

    crate self Self super

    true false

    abstract become box do final macro override priv try typeof unsized virtual yield
    ```

    % id = "01HTWRAS0EQRQJ9NHYPTE89Q5H"
    - sample
    ```rust
    use chrono::{Datelike, Utc};
    use serde::{Deserialize, Serialize};

    #[derive(Debug, Clone, Copy, PartialEq, Eq, Deserialize, Serialize)]
    #[serde(rename_all = "snake_case")]
    pub enum Season {
        Spring,
        Summer,
        Autumn,
        Winter,
    }

    impl Season {
        pub fn on(month: u32, day: u32) -> Option<Season> {
            let md = (month, day);
            Some(match () {
                _ if ((1, 1)..=(3, 20)).contains(&md) => Season::Winter,
                _ if ((3, 21)..=(6, 21)).contains(&md) => Season::Spring,
                _ if ((6, 22)..=(9, 22)).contains(&md) => Season::Summer,
                _ if ((9, 23)..=(12, 21)).contains(&md) => Season::Autumn,
                _ if ((12, 22)..=(12, 31)).contains(&md) => Season::Winter,
                // Just in case something really darn weird happens to the calendar.
                _ => return None,
            })
        }

        pub fn current() -> Option<Season> {
            let now = Utc::now();
            Self::on(now.month(), now.day())
        }
    }
    ```
